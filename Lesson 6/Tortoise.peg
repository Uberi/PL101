start = statements

statements = statement*

statement
    = expr:expression ws ";" ws
      { return { tag:"ignore", body:expr }; }
    / assign / define / if / repeat / var

assign = v:identifier ws ":=" ws expr:expression ws ";" ws
    { return { tag:":=", left:v, right:expr }; }

define
    = "define " ws v:identifier ws 
      "(" ws ")" ws
      "{" ws body:statements ws "}" ws
      { return { tag:"define", name:v, args:[], body:body }; }
    / "define " ws v:identifier ws 
      "(" ws args:ident_list ws ")" ws
      "{" ws body:statements ws "}" ws
      { return { tag:"define", name:v, args:args, body:body }; }

if
    = "if" ws "(" expr:expression ")" ws
      "{" ws body:statements ws "}"
      { return { tag:"if", expr:expr, body:body }; }

repeat
    = "repeat" ws "(" expr:expression ")" ws
      "{" ws body:statements ws "}"
      { return { tag:"repeat", expr:expr, body:body }; }

var
    = "var" ws v:identifier ";"
      { return { tag:"var", name:v }; }

comma_identifier = "," ws v:identifier
    { return v; }

ident_list = first:identifier rest:comma_identifier*
    { return [first].concat(rest); }

expression = comparative

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
    = left:additive ws op:comp_op ws right:comparative
      { return {tag: op, left:left, right:right}; }
    / additive

additive_op = "+" / "-"

additive
    = left:multiplicative ws op:additive_op ws right:additive
      { return {tag:op, left:left, right:right}; }
    / multiplicative

mult_op = "*" / "/"

multiplicative
    = left:primary ws op:mult_op ws right:multiplicative
      { return {tag:op, left:left, right:right}; }
    / primary

primary
    = number
    / v:identifier "(" ws ")"
      { return {tag:"call", name:v, args:[]}; }
    / v:identifier "(" ws args:arglist ws ")"
      { return {tag:"call", name:v, args:args}; }
    / v:identifier
      { return {tag:"ident", name:v} }
    / "(" ws expr:expression ws ")"
      { return expr; }

comma_expression = "," ws expr:expression
    { return expr; }

arglist = first:expression rest:comma_expression*
    { return [first].concat(rest); }

number_frac = "." chars:[0-9]*
    { return "." + chars.join(''); }

number = sign:"-"? chars:[0-9]+ frac:number_frac?
    { return parseFloat((sign[0] ? sign[0] : "") + chars.join('') + frac); }

identifier = firstchar:[a-zA-Z_] chars:[0-9a-zA-Z_]*
    { return firstchar + chars.join(''); }

ws = [ \t\n]*